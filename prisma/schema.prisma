// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  password String
  name     String
  voted    Boolean @default(false)
  donePre  Boolean @default(false)
  donePost Boolean @default(false)
  doneEval Boolean @default(false)
}

model Period {
  id      String     @id @default(cuid())
  endDate DateTime
  current Boolean    @default(true)
  type    PeriodType
  seminar Seminar[]
}

model Seminar {
  id            String         @id @default(cuid())
  title         String         @unique
  questionsPre  QuestionPre[]
  questionsPost QuestionPost[]
  questionsEval QuestionEval[]
  votes         Int            @default(0)

  period   Period @relation(fields: [periodId], references: [id])
  periodId String
}

model QuestionPre {
  id       String   @id @default(cuid())
  question String   @unique
  answers  String[]
  correct  Int

  seminar   Seminar? @relation(fields: [seminarId], references: [id])
  seminarId String?
}

model QuestionPost {
  id       String   @id @default(cuid())
  question String   @unique
  answers  String[]
  correct  Int

  seminar   Seminar? @relation(fields: [seminarId], references: [id])
  seminarId String?
}

model QuestionEval {
  id       String   @id @default(cuid())
  question String   @unique
  answers  String[]

  seminar   Seminar? @relation(fields: [seminarId], references: [id])
  seminarId String?
}

enum PeriodType {
  VOTE
  PRE
  POST
  EVAL
}
